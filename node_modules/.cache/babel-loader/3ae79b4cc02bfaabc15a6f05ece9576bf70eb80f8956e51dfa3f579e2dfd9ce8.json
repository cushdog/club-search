{"ast":null,"code":"var _jsxFileName = \"/Users/tylercushing/Desktop/card-test/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport * as React from 'react';\nimport ActionAreaCard from '../src/Components/ActionAreaCard';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { data } from './clubs';\nimport { usePapaParse } from 'react-papaparse';\n\n// function myFunction() {\n//   // Declare variables\n//   var input, filter, ul, li, a, i, txtValue;\n//   input = document.getElementById('myInput');\n//   filter = input.value.toUpperCase();\n//   ul = document.getElementById(\"club_cards\");\n//   li = ul.getElementsByTagName('li');\n\n//   // Loop through all list items, and hide those who don't match the search query\n//   for (i = 0; i < li.length; i++) {\n//     a = li[i].getElementsByTagName(\"a\")[0];\n//     txtValue = a.textContent || a.innerText;\n//     if (txtValue.toUpperCase().indexOf(filter) > -1) {\n//       li[i].style.display = \"\";\n//     } else {\n//       li[i].style.display = \"none\";\n//     }\n//   }\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [card_info, updateCardInfo] = useState([]);\n  const {\n    readString\n  } = usePapaParse();\n  useEffect(() => {\n    let card_info = [];\n    const csvString = data;\n    readString(csvString, {\n      worker: true,\n      complete: results => {\n        results.data.forEach(cardData => {\n          card_info.push(cardData[0]);\n          updateCardInfo([...card_info, cardData[0]]);\n        });\n      }\n    });\n  });\n  let textArray = card_info;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto bg-gray-200 rounded-xl shadow border p-8 m-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-3xl text-gray-700 font-bold mb-5\",\n      children: \"Welcome!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), textArray.map((text, index) => /*#__PURE__*/_jsxDEV(ActionAreaCard, {\n      description: text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qyURhLEf386wpcJ4FBcKcZ9hJe0=\", false, function () {\n  return [usePapaParse];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ActionAreaCard","useState","useEffect","data","usePapaParse","jsxDEV","_jsxDEV","App","_s","card_info","updateCardInfo","readString","csvString","worker","complete","results","forEach","cardData","push","textArray","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","text","index","description","_c","$RefreshReg$"],"sources":["/Users/tylercushing/Desktop/card-test/src/App.js"],"sourcesContent":["import './App.css';\nimport * as React from 'react';\nimport ActionAreaCard from '../src/Components/ActionAreaCard';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nimport { data } from './clubs';\n\nimport { usePapaParse } from 'react-papaparse';\n\n// function myFunction() {\n//   // Declare variables\n//   var input, filter, ul, li, a, i, txtValue;\n//   input = document.getElementById('myInput');\n//   filter = input.value.toUpperCase();\n//   ul = document.getElementById(\"club_cards\");\n//   li = ul.getElementsByTagName('li');\n\n//   // Loop through all list items, and hide those who don't match the search query\n//   for (i = 0; i < li.length; i++) {\n//     a = li[i].getElementsByTagName(\"a\")[0];\n//     txtValue = a.textContent || a.innerText;\n//     if (txtValue.toUpperCase().indexOf(filter) > -1) {\n//       li[i].style.display = \"\";\n//     } else {\n//       li[i].style.display = \"none\";\n//     }\n//   }\n// }\n\n\n\nfunction App() {\n\n  let [card_info, updateCardInfo] = useState([]);\n\n  \n  const { readString } = usePapaParse();\n  useEffect(() => {\n    let card_info = [];\n    const csvString = data;\n\n  \n    readString(csvString, {\n      worker: true,\n      complete: (results) => {\n        results.data.forEach((cardData) => {\n          card_info.push(cardData[0]);\n          updateCardInfo([...card_info, cardData[0]]);\n        });\n      },\n    });\n  });\n\n  let textArray = card_info;\n\n  return (\n    <div className=\"container mx-auto bg-gray-200 rounded-xl shadow border p-8 m-10\">\n      <p className=\"text-3xl text-gray-700 font-bold mb-5\">\n        Welcome!\n      </p>\n\n      {textArray.map((text, index) => (\n        <ActionAreaCard key={index} description={text} />\n      ))}\n\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,SAAS,QAAQ,OAAO;AAEjC,SAASC,IAAI,QAAQ,SAAS;AAE9B,SAASC,YAAY,QAAQ,iBAAiB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,IAAI,CAACC,SAAS,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAG9C,MAAM;IAAEU;EAAW,CAAC,GAAGP,YAAY,CAAC,CAAC;EACrCF,SAAS,CAAC,MAAM;IACd,IAAIO,SAAS,GAAG,EAAE;IAClB,MAAMG,SAAS,GAAGT,IAAI;IAGtBQ,UAAU,CAACC,SAAS,EAAE;MACpBC,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAGC,OAAO,IAAK;QACrBA,OAAO,CAACZ,IAAI,CAACa,OAAO,CAAEC,QAAQ,IAAK;UACjCR,SAAS,CAACS,IAAI,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;UAC3BP,cAAc,CAAC,CAAC,GAAGD,SAAS,EAAEQ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAIE,SAAS,GAAGV,SAAS;EAEzB,oBACEH,OAAA;IAAKc,SAAS,EAAC,iEAAiE;IAAAC,QAAA,gBAC9Ef,OAAA;MAAGc,SAAS,EAAC,uCAAuC;MAAAC,QAAA,EAAC;IAErD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAEHN,SAAS,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACzBtB,OAAA,CAACN,cAAc;MAAa6B,WAAW,EAAEF;IAAK,GAAzBC,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAsB,CACjD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEV;AAACjB,EAAA,CApCQD,GAAG;EAAA,QAKaH,YAAY;AAAA;AAAA0B,EAAA,GAL5BvB,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}